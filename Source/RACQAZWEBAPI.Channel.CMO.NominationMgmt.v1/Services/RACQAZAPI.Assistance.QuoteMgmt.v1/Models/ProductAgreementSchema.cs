//RACQAZ.Channel.CMO.NominationMgmt.v1.API.QuoteManagement.Model CreateQuoteRequest CreateQuoteResponse
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace RACQAZ.Channel.CMO.NominationMgmt.v1.API.QuoteManagement.Model
{
    using System;
    using System = global::System;



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApttusQuote
    {
        [Newtonsoft.Json.JsonProperty("ApplicationArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationArea ApplicationArea { get; set; }

        [Newtonsoft.Json.JsonProperty("DataArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataArea DataArea { get; set; }

        [Newtonsoft.Json.JsonProperty("Result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result Result { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Sender
    {
        [Newtonsoft.Json.JsonProperty("SystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemId { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemComponentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemComponentId { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemReferenceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Originator
    {
        [Newtonsoft.Json.JsonProperty("SystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemId { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemComponentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemComponentId { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemReferenceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Interaction
    {
        [Newtonsoft.Json.JsonProperty("Originator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Originator Originator { get; set; }

        [Newtonsoft.Json.JsonProperty("InteractionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InteractionDateTime { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationArea
    {
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Message Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Interaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Interaction Interaction { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Error
    {
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("System", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string System { get; set; }

        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtraDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraDetail { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Warning
    {
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("System", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string System { get; set; }

        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtraDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraDetail { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Information
    {
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("System", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string System { get; set; }

        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtraDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraDetail { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Message
    {
        [Newtonsoft.Json.JsonProperty("Sender", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Sender Sender { get; set; } = new Sender();

        /// <summary>The date time stamp that the Sender created this message</summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDateTime { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Result
    {
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Message Message { get; set; }

        [Newtonsoft.Json.JsonProperty("ResultCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdentifierIdentification
    {
        [Newtonsoft.Json.JsonProperty("IdentificationSchemeAgencyIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationSchemeAgencyIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentificationSchemeAgencyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificationSchemeAgencyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Designation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Designation { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataArea
    {
        [Newtonsoft.Json.JsonProperty("ProductAgreementList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductAgreement> ProductAgreementList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PricingType
    {
        /// <summary>The price for that period</summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>The type of prices eg. FlatPrice, NetPrice, TierPrice, BasePrice etc.</summary>
        [Newtonsoft.Json.JsonProperty("PriceTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PriceTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("PricePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PricePercentage { get; set; }

        [Newtonsoft.Json.JsonProperty("PriceIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PriceIndicator { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdjustmentType
    {
        /// <summary>The amount of the adjustment to be applied</summary>
        [Newtonsoft.Json.JsonProperty("AdjustmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AdjustmentAmount { get; set; }

        /// <summary>Indicates whether the adjustment is applicable</summary>
        [Newtonsoft.Json.JsonProperty("AdjustmentApplicableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdjustmentApplicableIndicator { get; set; }

        /// <summary>The percentage of the adjustment to be applied</summary>
        [Newtonsoft.Json.JsonProperty("AdjustmentPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdjustmentPercentage { get; set; }

        /// <summary>The type of adjustment eg. BundleDiscount, PremiumIncrease, PremiumDescrease, FamilyDiscount ...etc</summary>
        [Newtonsoft.Json.JsonProperty("AdjustmentTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdjustmentTypeCode { get; set; }

        /// <summary>Indicates whether the adjustment should be applied to future agreement renewals</summary>
        [Newtonsoft.Json.JsonProperty("RenewalIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RenewalIndicator { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DirectDebitType
    {
        [Newtonsoft.Json.JsonProperty("AddedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddedBy { get; set; }

        /// <summary>The date/time the remark was created</summary>
        [Newtonsoft.Json.JsonProperty("AddedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AddedDate { get; set; }

        /// <summary>Indicates whether the financial account is enabled for direct debit</summary>
        [Newtonsoft.Json.JsonProperty("DirectDebitStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DirectDebitStatusCode { get; set; }

        /// <summary>The direct debit type eg. Card, BankAccount, etc</summary>
        [Newtonsoft.Json.JsonProperty("DirectDebitTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DirectDebitTypeCode DirectDebitTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("EffectiveFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectiveFromDate { get; set; }

        [Newtonsoft.Json.JsonProperty("EffectiveToDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectiveToDate { get; set; }

        [Newtonsoft.Json.JsonProperty("FinancialAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FinancialAccountType FinancialAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("RemarkInformationList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemarkInformationType> RemarkInformationList { get; set; }


    }

    /// <summary>Contains information about the financial account</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FinancialAccountType
    {
        /// <summary>Name of the account holder of the bank account or credit card</summary>
        [Newtonsoft.Json.JsonProperty("AccountHolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountHolderName { get; set; }

        /// <summary>The year and month the credit card expires</summary>
        [Newtonsoft.Json.JsonProperty("CardExpirationYearMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardExpirationYearMonth { get; set; }

        /// <summary>The financial account type eg. Savings, Credit, Debit, Unknown, etc</summary>
        [Newtonsoft.Json.JsonProperty("FinancialAccountTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialAccountTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("FinancialIdentifierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FinancialIdentifierList> FinancialIdentifierList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RemarkInformationType
    {
        [Newtonsoft.Json.JsonProperty("SequenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SequenceNumber { get; set; }

        /// <summary>The person/user who created the remark</summary>
        [Newtonsoft.Json.JsonProperty("AddedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddedBy { get; set; }

        /// <summary>The date/time the remark was created</summary>
        [Newtonsoft.Json.JsonProperty("AddedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AddedDate { get; set; }

        /// <summary>The date/time the remark will end</summary>
        [Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("GeneratingSystemName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeneratingSystemName { get; set; }

        /// <summary>The person/user who last modified the remark</summary>
        [Newtonsoft.Json.JsonProperty("LastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy { get; set; }

        /// <summary>The date/time the remark was last modified</summary>
        [Newtonsoft.Json.JsonProperty("LastModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Outcome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outcome { get; set; }

        /// <summary>Indicates whether the remark should appear on printed material</summary>
        [Newtonsoft.Json.JsonProperty("PrintIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("ProducerVisibilityIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProducerVisibilityIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

        /// <summary>A code indicating the subtype of remark</summary>
        [Newtonsoft.Json.JsonProperty("RemarkSubTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemarkSubTypeCode { get; set; }

        /// <summary>A code indicating the type of remark eg. Note, Declaration, DutyOfDisclosure ...etc</summary>
        [Newtonsoft.Json.JsonProperty("RemarkTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemarkTypeCode { get; set; }

        /// <summary>The date/time the remark will start</summary>
        [Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>Status of the remark</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BillingType
    {
        [Newtonsoft.Json.JsonProperty("FinancialAccountList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FinancialAccountType> FinancialAccountList { get; set; }

        /// <summary>The billing frequency description</summary>
        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Frequency { get; set; }

        /// <summary>The billing frequency code</summary>
        [Newtonsoft.Json.JsonProperty("FrequencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FrequencyCode { get; set; }

        /// <summary>The number of instalments in which the amount will be paid</summary>
        [Newtonsoft.Json.JsonProperty("InstalmentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InstalmentCount { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentType> PaymentList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentType
    {
        [Newtonsoft.Json.JsonProperty("FinancialAccountList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FinancialAccountType> FinancialAccountList { get; set; }

        /// <summary>The type of financial transaction eg. Receipt, Refund, Settlement ...etc</summary>
        [Newtonsoft.Json.JsonProperty("FinancialTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialTransactionCode { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PaymentAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentDate { get; set; }

        /// <summary>The status of the payment eg. Requesting, Issued, Cleared, Stopped, Voided ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PaymentStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentStatusCode { get; set; }

        /// <summary>The payment type eg. CreditCard, DebitCard, EFT ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PaymentTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentTypeCode { get; set; }


    }

    /// <summary>Details about a vehicle engine</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EngineType
    {
        /// <summary>The capacity of an engine (ie. litres)</summary>
        [Newtonsoft.Json.JsonProperty("CapacityMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityMeasure CapacityMeasure { get; set; }

        /// <summary>The number of cylinders of the engine</summary>
        [Newtonsoft.Json.JsonProperty("CylinderCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CylinderCount { get; set; }

        [Newtonsoft.Json.JsonProperty("CylinderDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CylinderDescription { get; set; }

        /// <summary>A description of the engine</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The displacement of the engine or motor</summary>
        [Newtonsoft.Json.JsonProperty("DisplacementMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplacementMeasure DisplacementMeasure { get; set; }

        /// <summary>The name of the engine configuration</summary>
        [Newtonsoft.Json.JsonProperty("EngineConfigurationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineConfigurationName { get; set; }

        [Newtonsoft.Json.JsonProperty("ExternalIdentifierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalIdentifierList> ExternalIdentifierList { get; set; }

        /// <summary>The type of fuel used in the engine eg. Gasoline, Ethanol, Electric, Diesel, Hybrid, NaturealGas...etc</summary>
        [Newtonsoft.Json.JsonProperty("FuelTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FuelTypeCode { get; set; }

        /// <summary>The common measurement when rating an engine's power</summary>
        [Newtonsoft.Json.JsonProperty("HorsepowerMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HorsepowerMeasure HorsepowerMeasure { get; set; }

        /// <summary>Whether the engine is turbocharged</summary>
        [Newtonsoft.Json.JsonProperty("TurbochargedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TurbochargedIndicator { get; set; }


    }

    /// <summary>Details about a location</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationAddressType
    {
        [Newtonsoft.Json.JsonProperty("LocationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationReference { get; set; }

        /// <summary>The type of location eg. Residential, Postal, Mailing, Billing, Shipping, Risk...etc</summary>
        [Newtonsoft.Json.JsonProperty("LocationTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("PerilCodeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PerilCodeList { get; set; }

        /// <summary>Indicates whether this is the primary location</summary>
        [Newtonsoft.Json.JsonProperty("PrimaryIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryIndicator { get; set; }

        /// <summary>When used for mailing purposes, this indicates whether mail was returned and so the address is no longer valid for mailing
        /// NOTE: Could also indicate that there is an issue with the address details</summary>
        [Newtonsoft.Json.JsonProperty("ReturnedMailIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnedMailIndicator { get; set; }

        /// <summary>Salutation</summary>
        [Newtonsoft.Json.JsonProperty("Salutation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Salutation { get; set; }


    }

    /// <summary>Details about a Manufacturer of a product or item</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Manufacturer
    {
        /// <summary>The brand name of the item. This is used when a manufacturer produced the item that is sold under a different name</summary>
        [Newtonsoft.Json.JsonProperty("BrandName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandName { get; set; }

        /// <summary>An industry code identifying the make of the item</summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerCode { get; set; }

        /// <summary>The name of the person or organization that manufactured the item</summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerName { get; set; }

        /// <summary>An industry code identifying the model of the item</summary>
        [Newtonsoft.Json.JsonProperty("ModelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelCode { get; set; }

        /// <summary>The manufacturer model name for this item</summary>
        [Newtonsoft.Json.JsonProperty("ModelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelName { get; set; }

        /// <summary>The series of the base model</summary>
        [Newtonsoft.Json.JsonProperty("ModelSeries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelSeries { get; set; }

        /// <summary>The line or variation of the model</summary>
        [Newtonsoft.Json.JsonProperty("ModelVariant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelVariant { get; set; }

        /// <summary>The model year for this item. May or may not be the actual year built</summary>
        [Newtonsoft.Json.JsonProperty("ModelYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelYear { get; set; }


    }

    /// <summary>Details about the occupancy of a residential or commercial building</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OccupancyType
    {
        [Newtonsoft.Json.JsonProperty("NumberOfPets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? NumberOfPets { get; set; }

        /// <summary>The type of occupancy eg. Owner, Tenant, Seasonal, Vacant, Boarder, Landlord, Commune ...etc</summary>
        [Newtonsoft.Json.JsonProperty("OccupancyTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupancyTypeCode { get; set; }

        /// <summary>An indication of whether the property is occupied by a business</summary>
        [Newtonsoft.Json.JsonProperty("OtherBusinessOccupiedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OtherBusinessOccupiedIndicator { get; set; }

        /// <summary>Indicates whether the property is permanently occupied</summary>
        [Newtonsoft.Json.JsonProperty("PermanentOccupiedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PermanentOccupiedIndicator { get; set; }


    }

    /// <summary>A code that identifies specific extension, restrictions or exclusions that modify the coverage and may or may not affect the premium</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OptionType
    {
        [Newtonsoft.Json.JsonProperty("ValueType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ValueType { get; set; }

        /// <summary>A description of the option</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>A code that represents the type of option</summary>
        [Newtonsoft.Json.JsonProperty("OptionTypeCode", Required = Newtonsoft.Json.Required.AllowNull)]
        public string OptionTypeCode { get; set; }

        /// <summary>A code that represents a sub option. This allows for another level of categorisation/classification of the option type</summary>
        [Newtonsoft.Json.JsonProperty("SubOptionTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubOptionTypeCode { get; set; }

        /// <summary>The amount of the option</summary>
        [Newtonsoft.Json.JsonProperty("ValueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValueAmount { get; set; }

        /// <summary>Indicator reflecting the option (True/False, Yes,No)</summary>
        [Newtonsoft.Json.JsonProperty("ValueIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValueIndicator { get; set; }

        /// <summary>A numerical value of the option</summary>
        [Newtonsoft.Json.JsonProperty("ValueInteger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ValueInteger { get; set; }

        /// <summary>The percentage of the option</summary>
        [Newtonsoft.Json.JsonProperty("ValuePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValuePercent { get; set; }


    }

    /// <summary>A list of included and excluded perils eg. Fire, Flood ...etc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PerilType
    {
        [Newtonsoft.Json.JsonProperty("PerilExcludedList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerilExcludedList PerilExcludedList { get; set; }

        [Newtonsoft.Json.JsonProperty("PerilIncludedList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerilIncludedList PerilIncludedList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductAgreementBaseType
    {
        /// <summary>The date/time that the product agreement is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("AgreementEndDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset? AgreementEndDate { get; set; }

        /// <summary>The date/time that the product agreement starts</summary>
        [Newtonsoft.Json.JsonProperty("AgreementStartDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset? AgreementStartDate { get; set; }

        /// <summary>The brand code for the product agreement. This is to support white labeling</summary>
        [Newtonsoft.Json.JsonProperty("BrandCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandCode { get; set; }

        /// <summary>Broad Line of Business code eg. CI (Commercial Insurance), PI (Personal Insurance), PA (Personal Assistance), CA (Commercial Assistance)
        /// NOTE: The BroadLOB values are restricted by the Pillar</summary>
        [Newtonsoft.Json.JsonProperty("BroadLOBCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BroadLOBCode { get; set; }

        /// <summary>The channel that the product agreement was generated from</summary>
        [Newtonsoft.Json.JsonProperty("ChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelCode { get; set; }

        /// <summary>Usage: Used for GL postings</summary>
        [Newtonsoft.Json.JsonProperty("CompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyCode { get; set; }

        /// <summary>The effectve date of the most recent update to this product agreement</summary>
        [Newtonsoft.Json.JsonProperty("EffectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EffectiveDate { get; set; }

        /// <summary>The original date/time that the product was purchased</summary>
        [Newtonsoft.Json.JsonProperty("InceptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InceptionDate { get; set; }

        /// <summary>Line of Business code eg. Motor, Home, Pet, CTP (Compulsary Third Party), RSA (Roadside Assistance), AM (Associate Motoring), HA (Home Assistance), LS (Lifestyle)
        /// NOTE: The LOB values are restricted by the BroadLOB</summary>
        [Newtonsoft.Json.JsonProperty("LOBCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LOBCode { get; set; }

        /// <summary>The payment status of the product agreement as at claim lodgement date for payment due eg. Reconciled, PartiallyPaid, Unreconciled, Instalment, Paid, Unpaid ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PaidStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaidStatusCode { get; set; }

        /// <summary>Business pillar eg. INS (Insurance), ASSIST (Assistance), BANK (Banking)</summary>
        [Newtonsoft.Json.JsonProperty("PillarCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PillarCode { get; set; }

        /// <summary>A unique identifier/reference generated by the "product system" (eg. PolicyCenter, MARS...etc) for the agreement. Each product system manages is own agreements</summary>
        [Newtonsoft.Json.JsonProperty("ProductAgreementReferenceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProductAgreementReferenceId ProductAgreementReferenceId { get; set; } = new ProductAgreementReferenceId();

        [Newtonsoft.Json.JsonProperty("ProductAgreementTermNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? ProductAgreementTermNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductClassificationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductClassificationCode> ProductClassificationCode { get; set; }

        /// <summary>The identifier of the product that the product agreement represents</summary>
        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        /// <summary>The product type eg. Vehicle, Watercraft, Property, Pet, Lifestyle, Strata, Roadside, AssociateMotoring, HomeAssist
        /// NOTE: The options available are determined by the Pillar, BroadLOB and LOB</summary>
        [Newtonsoft.Json.JsonProperty("ProductTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductTypeCode { get; set; }

        /// <summary>This represents the version of the product ie. PDS version</summary>
        [Newtonsoft.Json.JsonProperty("ProductVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductVersion { get; set; }

        /// <summary>This represents the status of the product agreement</summary>
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusCode { get; set; }

        /// <summary>The date/time that the product agreement was terminated (cancelled)</summary>
        [Newtonsoft.Json.JsonProperty("TerminationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TerminationDate { get; set; }

        /// <summary>The reason that the product agreement was terminated (cancelled)</summary>
        [Newtonsoft.Json.JsonProperty("TerminationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TerminationReason { get; set; }

        /// <summary>Usage: The company is used together with the ProductType to identify the right products, formulas...etc for pricing</summary>
        [Newtonsoft.Json.JsonProperty("UnderwritingCompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnderwritingCompanyCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductAgreement
    {
        /// <summary>Address of the policy holder i.e. Policy Address</summary>
        [Newtonsoft.Json.JsonProperty("AddressList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AddressType> AddressList { get; set; }

        [Newtonsoft.Json.JsonProperty("AdjustmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdjustmentType> AdjustmentList { get; set; }

        /// <summary>The date/time that the product agreement starts</summary>
        [Newtonsoft.Json.JsonProperty("AgreementStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreementStartDate { get; set; }

        /// <summary>The date/time that the product agreement is due to expire</summary>
        [Newtonsoft.Json.JsonProperty("AgreementEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreementEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Billing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingType Billing { get; set; }

        /// <summary>The brand code for the product agreement. This is to support white labeling</summary>
        [Newtonsoft.Json.JsonProperty("BrandCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandCode { get; set; }

        /// <summary>Broad Line of Business code eg. CI (Commercial Insurance), PI (Personal Insurance), PA (Personal Assistance), CA (Commercial Assistance)
        /// NOTE: The BroadLOB values are restricted by the Pillar</summary>
        [Newtonsoft.Json.JsonProperty("BroadLOBCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BroadLOBCode { get; set; }

        /// <summary>The channel that the product agreement was generated from</summary>
        [Newtonsoft.Json.JsonProperty("ChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelCode { get; set; }

        /// <summary>Usage: Used for GL postings</summary>
        [Newtonsoft.Json.JsonProperty("CompanyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyCode { get; set; }

        /// <summary>Co-members/co-owners of product systems</summary>
        [Newtonsoft.Json.JsonProperty("CoOwnersList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CoOwnerType> CoOwnersList { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DirectDebitList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DirectDebitType> DirectDebitList { get; set; }

        /// <summary>The effectve date of the most recent update to this product agreement</summary>
        [Newtonsoft.Json.JsonProperty("EffectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EffectiveDate { get; set; }

        [Newtonsoft.Json.JsonProperty("FlagIdentifierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlagIdentifierType> FlagIdentifierList { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentifierIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentifierIdentification> IdentifierIdentification { get; set; }

        /// <summary>The original date/time that the product was purchased</summary>
        [Newtonsoft.Json.JsonProperty("InceptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InceptionDate { get; set; }

        /// <summary>Whether Membership is eligible or not for that particular asset/product</summary>
        [Newtonsoft.Json.JsonProperty("IsMembershipEligible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMembershipEligible { get; set; }

        /// <summary>Line of Business code eg. Motor, Home, Pet, CTP (Compulsary Third Party), RSA (Roadside Assistance), AM (Associate Motoring), HA (Home Assistance), LS (Lifestyle)
        /// NOTE: The LOB values are restricted by the BroadLOB</summary>
        [Newtonsoft.Json.JsonProperty("LOBCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LOBCode { get; set; }

        /// <summary>The payment status of the product agreement as at claim lodgement date for payment due eg. Reconciled, PartiallyPaid, Unreconciled, Instalment, Paid, Unpaid ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PaidStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaidStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentReferenceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("PetCoverableList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PetCoverableType> PetCoverableList { get; set; }

        /// <summary>Business pillar eg. INS (Insurance), ASSIST (Assistance), BANK (Banking)</summary>
        [Newtonsoft.Json.JsonProperty("PillarCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PillarCode { get; set; }

        [Newtonsoft.Json.JsonProperty("PricingList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PricingType> PricingList { get; set; }

        /// <summary>A unique identifier/reference generated by the "product system" (eg. PolicyCenter, MARS...etc) for the agreement. Each product system manages is own agreements</summary>
        [Newtonsoft.Json.JsonProperty("ProductAgreementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductAgreementReference> ProductAgreementReference { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductAgreementTermNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? ProductAgreementTermNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductClassification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductClassification> ProductClassification { get; set; }

        /// <summary>The identifier of the product that the product agreement represents</summary>
        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductId { get; set; }

        /// <summary>The product type eg. Vehicle, Watercraft, Property, Pet, Lifestyle, Strata, Roadside, AssociateMotoring, HomeAssist
        /// NOTE: The options available are determined by the Pillar, BroadLOB and LOB</summary>
        [Newtonsoft.Json.JsonProperty("ProductTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductTypeCode { get; set; }

        /// <summary>This represents the version of the product ie. PDS version</summary>
        [Newtonsoft.Json.JsonProperty("ProductVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("PropertyCoverableList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyCoverableType> PropertyCoverableList { get; set; }

        /// <summary>This represents the status of the product agreement</summary>
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusCode { get; set; }

        /// <summary>The date/time that the product agreement was terminated (cancelled)</summary>
        [Newtonsoft.Json.JsonProperty("TerminationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TerminationDate { get; set; }

        /// <summary>The reason that the product agreement was terminated (cancelled)</summary>
        [Newtonsoft.Json.JsonProperty("TerminationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TerminationReason { get; set; }

        [Newtonsoft.Json.JsonProperty("VehicleCoverableList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VehicleCoverable> VehicleCoverableList { get; set; }

        [Newtonsoft.Json.JsonProperty("WatercraftCoverableList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WatercraftCoverableType> WatercraftCoverableList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CoOwnerType
    {
        [Newtonsoft.Json.JsonProperty("CoOwnersReferenceList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CoOwnersReferenceType> CoOwnersReferenceList { get; set; }

        [Newtonsoft.Json.JsonProperty("EffectiveFromDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectiveFromDate { get; set; }

        [Newtonsoft.Json.JsonProperty("EffectiveToDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectiveToDate { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentifierIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentifierIdentification> IdentifierIdentification { get; set; }


    }

    /// <summary>Identifier of APTTUS CoOwner.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CoOwnersReferenceType
    {
        [Newtonsoft.Json.JsonProperty("IdentifierTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }


    }

    /// <summary>Details of various flags or indicators like DeliquencyFlag, TroubleTicketsExist etc. Only allows boolean values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FlagIdentifierType
    {
        [Newtonsoft.Json.JsonProperty("FlagTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FlagTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("FlagValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FlagValue { get; set; }


    }

    /// <summary>Details about a Pet</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PetCoverableType
    {
        /// <summary>The date of birth of the pet</summary>
        [Newtonsoft.Json.JsonProperty("BirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthDate { get; set; }

        /// <summary>The breed of the pet
        /// NOTE: This is restricted based on the type of pet</summary>
        [Newtonsoft.Json.JsonProperty("Breed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Breed { get; set; }

        /// <summary>A code representing the breed of the pet. 
        /// NOTE: This is restricted based on the type of pet</summary>
        [Newtonsoft.Json.JsonProperty("BreedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BreedCode { get; set; }

        /// <summary>Details of the pet</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>Indicates whether the pet has been desexed</summary>
        [Newtonsoft.Json.JsonProperty("DesexedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DesexedIndicator { get; set; }

        /// <summary>External identifiers for the pet eg. Microchip number, registration number ...etc</summary>
        [Newtonsoft.Json.JsonProperty("ExternalIdentifierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalIdentifierList2> ExternalIdentifierList { get; set; }

        /// <summary>A code representing the gender of the pet eg. Female, Male</summary>
        [Newtonsoft.Json.JsonProperty("GenderCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GenderCode { get; set; }

        /// <summary>The date of the pets last vaccination</summary>
        [Newtonsoft.Json.JsonProperty("LastVaccinationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastVaccinationDate { get; set; }

        /// <summary>Name of the pet</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("PetNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PetNumber { get; set; }

        /// <summary>The type of pet eg. Dog, Cat ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PetTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PetTypeCode { get; set; }

        /// <summary>Indicates whether the pet has pre existing health conditions</summary>
        [Newtonsoft.Json.JsonProperty("PreExistingConditionIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreExistingConditionIndicator { get; set; }

        /// <summary>Details of the pets regular vet</summary>
        [Newtonsoft.Json.JsonProperty("Veterinary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Veterinary Veterinary { get; set; }


    }

    /// <summary>Details about an individual's name</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PersonNameType
    {
        /// <summary>Contains the combined given names as they are to appear on printed documents</summary>
        [Newtonsoft.Json.JsonProperty("CombinedGivenNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CombinedGivenNames { get; set; }

        /// <summary>The complete name of a person</summary>
        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        /// <summary>The given name(s) of the individual</summary>
        [Newtonsoft.Json.JsonProperty("GivenNameList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GivenNameList> GivenNameList { get; set; }

        /// <summary>All initials excluding surname. NOTE: There should be NO punctuation, spaces or formatting.</summary>
        [Newtonsoft.Json.JsonProperty("Initials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Initials { get; set; }

        /// <summary>A designation that follows a person's full name and provides additional information about that person eg. Jr, PhD ...etc</summary>
        [Newtonsoft.Json.JsonProperty("NameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameSuffix { get; set; }

        /// <summary>A familiar name for a person (often a shortened version of a person's given name)</summary>
        [Newtonsoft.Json.JsonProperty("Nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nickname { get; set; }

        /// <summary>The type of name eg. Legal, Alias, Primary, Preferred, Previous, Maiden Name ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PersonNameTypeCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PersonNameTypeCode { get; set; }

        /// <summary>Any phrase to precede the name which is not part of the actual name eg. Mr., Dr., Mrs. ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PersonTitlePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonTitlePrefix { get; set; }

        /// <summary>A code for the phrase to precede the name which is not part of the actual name eg. Mr, Dr, Mrs ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PersonTitlePrefixCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonTitlePrefixCode { get; set; }

        /// <summary>Indicates whether this is the preferred person name</summary>
        [Newtonsoft.Json.JsonProperty("PreferredIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreferredIndicator { get; set; }

        /// <summary>The name or compound name used by an individual to denote his/her familial, tribal or geographic antecedents</summary>
        [Newtonsoft.Json.JsonProperty("Surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }


    }

    /// <summary>Contains information about the use of a watercraft</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WatercraftCoverableType
    {
        /// <summary>Details of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>Indicates whether the watercraft is self built</summary>
        [Newtonsoft.Json.JsonProperty("SelfBuiltIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SelfBuiltIndicator { get; set; }

        /// <summary>Watercraft storage and mooring information</summary>
        [Newtonsoft.Json.JsonProperty("StorageMooring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageMooringType StorageMooring { get; set; }

        /// <summary>Details about the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("Watercraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WatercraftType Watercraft { get; set; }

        /// <summary>The type of watercraft coverable that this defines eg. Combined, Watercraft, WatercraftEngine, WatercraftTrailer, WatercraftEquipment ...etc</summary>
        [Newtonsoft.Json.JsonProperty("WatercraftCoverableTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatercraftCoverableTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("WatercraftEngineList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WatercraftEngineType> WatercraftEngineList { get; set; }

        [Newtonsoft.Json.JsonProperty("WatercraftEquipmentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WatercraftEquipmentType> WatercraftEquipmentList { get; set; }

        /// <summary>Watercraft rig information</summary>
        [Newtonsoft.Json.JsonProperty("WatercraftRig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WatercraftRigType WatercraftRig { get; set; }

        /// <summary>Information relating to the trailer used to transport
        /// any type of watercraft</summary>
        [Newtonsoft.Json.JsonProperty("WatercraftTrailer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WatercraftTrailerType WatercraftTrailer { get; set; }

        /// <summary>Indicates whether the watercraft is used for waterskiing</summary>
        [Newtonsoft.Json.JsonProperty("WaterskiIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WaterskiIndicator { get; set; }


    }

    /// <summary>Watercraft storage and mooring information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StorageMooringType
    {
        /// <summary>The date the watercraft was last serviced</summary>
        [Newtonsoft.Json.JsonProperty("LastServicedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastServicedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object LocationList { get; set; }

        /// <summary>Indicates whether the watercraft is stored</summary>
        [Newtonsoft.Json.JsonProperty("StoredIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StoredIndicator { get; set; }

        /// <summary>Indicates whether the watercraft is street parked</summary>
        [Newtonsoft.Json.JsonProperty("StreetParkedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StreetParkedIndicator { get; set; }


    }

    /// <summary>Information relating to the motor of any type of watercraft</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WatercraftEngineType
    {
        /// <summary>A description of the watercraft engine</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>Contains information about the watercraft engine</summary>
        [Newtonsoft.Json.JsonProperty("Engine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EngineType Engine { get; set; }

        [Newtonsoft.Json.JsonProperty("ExternalIdentifierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalIdentifierList3> ExternalIdentifierList { get; set; }

        /// <summary>Indicates whether the engine is an Inboard</summary>
        [Newtonsoft.Json.JsonProperty("InBoardIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InBoardIndicator { get; set; }

        /// <summary>Contains manufacturer information of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        /// <summary>Indicates whether the engine has been manufactured for marine purposes</summary>
        [Newtonsoft.Json.JsonProperty("MarineManufacturedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarineManufacturedIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("SumInsuredAmount_CHECK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SumInsuredAmount_CHECK { get; set; }


    }

    /// <summary>Contains watercraft equipment measurement details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WatercraftEquipmentMeasurementType
    {
        /// <summary>The height of the equipment</summary>
        [Newtonsoft.Json.JsonProperty("HeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeightMeasure HeightMeasure { get; set; }

        /// <summary>The length of the equipment</summary>
        [Newtonsoft.Json.JsonProperty("LengthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LengthMeasure LengthMeasure { get; set; }

        /// <summary>The weight of the equipment</summary>
        [Newtonsoft.Json.JsonProperty("WeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightMeasure WeightMeasure { get; set; }

        /// <summary>The width of the equipment</summary>
        [Newtonsoft.Json.JsonProperty("WidthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WidthMeasure WidthMeasure { get; set; }


    }

    /// <summary>Information relating to any type of equipment for any type of watercraft</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WatercraftEquipmentType
    {
        /// <summary>A description of the equipment</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ExternalIdentifierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalIdentifierList4> ExternalIdentifierList { get; set; }

        /// <summary>Contains manufacturer information for the equipment</summary>
        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        /// <summary>Contains the measurements of the equipment</summary>
        [Newtonsoft.Json.JsonProperty("Measurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WatercraftEquipmentMeasurementType Measurement { get; set; }

        /// <summary>The date the equipment was purchased</summary>
        [Newtonsoft.Json.JsonProperty("PurchaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PurchaseDate { get; set; }

        /// <summary>An amount representing the value of the equipment</summary>
        [Newtonsoft.Json.JsonProperty("ValueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValueAmount { get; set; }

        /// <summary>The type of equipment eg. DepthSounder, Radar, BilgePump, LifeboatTender, PortableAccessories ...etc</summary>
        [Newtonsoft.Json.JsonProperty("WatercraftEquipmentTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatercraftEquipmentTypeCode { get; set; }


    }

    /// <summary>Contains watercraft measurement details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WatercraftMeasurementType
    {
        /// <summary>The capacityof the watercraft ie. number of people it can sleep</summary>
        [Newtonsoft.Json.JsonProperty("CapacityMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityMeasure2 CapacityMeasure { get; set; }

        /// <summary>The height of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("HeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeightMeasure2 HeightMeasure { get; set; }

        /// <summary>The length of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("LengthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LengthMeasure2 LengthMeasure { get; set; }

        /// <summary>The weight of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("WeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightMeasure2 WeightMeasure { get; set; }

        /// <summary>The width of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("WidthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WidthMeasure2 WidthMeasure { get; set; }

        /// <summary>The highest speed attainable by the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("MaximumSpeedMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaximumSpeedMeasure MaximumSpeedMeasure { get; set; }


    }

    /// <summary>Watercraft rig infomration</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WatercraftRigType
    {
        /// <summary>The date the watercraft rig was last serviced</summary>
        [Newtonsoft.Json.JsonProperty("LastServicedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastServicedDate { get; set; }

        /// <summary>Indicates whether the watercraft is rod rigged</summary>
        [Newtonsoft.Json.JsonProperty("RodRiggedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RodRiggedIndicator { get; set; }

        /// <summary>The number of sails</summary>
        [Newtonsoft.Json.JsonProperty("SailCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? SailCount { get; set; }

        [Newtonsoft.Json.JsonProperty("SailPurchaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SailPurchaseDate { get; set; }

        /// <summary>The number of spreaders for the watercraft rig</summary>
        [Newtonsoft.Json.JsonProperty("SpreaderCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? SpreaderCount { get; set; }


    }

    /// <summary>Contains watercraft trailer measurements details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WatercraftTrailerMeasurementType
    {
        /// <summary>The height of the trailer</summary>
        [Newtonsoft.Json.JsonProperty("HeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeightMeasure3 HeightMeasure { get; set; }

        /// <summary>The length of the trailer</summary>
        [Newtonsoft.Json.JsonProperty("LengthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LengthMeasure3 LengthMeasure { get; set; }

        /// <summary>The weight of the trailer</summary>
        [Newtonsoft.Json.JsonProperty("WeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightMeasure3 WeightMeasure { get; set; }

        /// <summary>The width of the trailer</summary>
        [Newtonsoft.Json.JsonProperty("WidthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WidthMeasure3 WidthMeasure { get; set; }

        /// <summary>The weight capacity of the trailer</summary>
        [Newtonsoft.Json.JsonProperty("WeightCapacityMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightCapacityMeasure WeightCapacityMeasure { get; set; }


    }

    /// <summary>Information relating to the trailer used to transport any type of watercraft</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WatercraftTrailerType
    {
        /// <summary>The number of axles</summary>
        [Newtonsoft.Json.JsonProperty("AxleCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? AxleCount { get; set; }

        /// <summary>A code representing the material the trailer is made from eg. Steel, Metal ...etc</summary>
        [Newtonsoft.Json.JsonProperty("ConstructionMaterialCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConstructionMaterialCode { get; set; }

        /// <summary>A decription of the trailer</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ExternalIdentifierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalIdentifierList5> ExternalIdentifierList { get; set; }

        /// <summary>Contains manufacturer information for the watercraft trailer</summary>
        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        /// <summary>Contains the measurements details of the trailer</summary>
        [Newtonsoft.Json.JsonProperty("Measurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WatercraftTrailerMeasurementType Measurement { get; set; }

        [Newtonsoft.Json.JsonProperty("OnRoadIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnRoadIndicator { get; set; }

        /// <summary>Registration details of the trailer</summary>
        [Newtonsoft.Json.JsonProperty("Registration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Registration Registration { get; set; }

        [Newtonsoft.Json.JsonProperty("SumInsuredAmount_CHECK", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SumInsuredAmount_CHECK { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WatercraftType
    {
        /// <summary>The condition of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("Condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        /// <summary>A description of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ExternalIdentifierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalIdentifierList6> ExternalIdentifierList { get; set; }

        /// <summary>A code representing the design of a watercraft hull eg. Catamaran, FlatBottom, Other, RoundBottom, VeeBottom...etc</summary>
        [Newtonsoft.Json.JsonProperty("HullDesignCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HullDesignCode { get; set; }

        /// <summary>A code representing the material from which a watercraft hull is constructed eg. Aluminum, Fiberglass, Metal, Rubber, Steel, InflatableFabric, Wood...etc</summary>
        [Newtonsoft.Json.JsonProperty("HullMaterialCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HullMaterialCode { get; set; }

        /// <summary>Manufacturer details of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        /// <summary>Measurement details of the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("Measurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WatercraftMeasurementType Measurement { get; set; }

        /// <summary>A code identifying the type of propulsion used for the watercraft eg. Sail, Waterjet, Inboard, Outboard, None, Other ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PropulsionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropulsionCode { get; set; }

        /// <summary>The date the watercraft was purchased</summary>
        [Newtonsoft.Json.JsonProperty("PurchaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurchaseDate { get; set; }

        /// <summary>Indicates whether the watercraft is used for racing</summary>
        [Newtonsoft.Json.JsonProperty("RacingIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RacingIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("RegistrationList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Registration> RegistrationList { get; set; }

        /// <summary>The name given to the watercraft</summary>
        [Newtonsoft.Json.JsonProperty("WatercraftName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatercraftName { get; set; }

        /// <summary>The type of watercraft eg. Motorboat, Jetski, Rowboat, Sailboat, Canoe, Yacht, Skiboat, Catamaran, InboardMotorboat…etc</summary>
        [Newtonsoft.Json.JsonProperty("WatercraftTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatercraftTypeCode { get; set; }


    }

    /// <summary>Contains information about a personal or commercial property, its occupancy, features, and any structures</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PropertyCoverableType
    {
        [Newtonsoft.Json.JsonProperty("LandAreaMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LandAreaMeasure LandAreaMeasure { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LocationAddressType> LocationList { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AddressType> AddressList { get; set; }

        /// <summary>Contains baisc information about the occupancy of a residential or commercial building</summary>
        [Newtonsoft.Json.JsonProperty("Occupancy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OccupancyType Occupancy { get; set; }

        [Newtonsoft.Json.JsonProperty("PropertyFeatureList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyFeatureType> PropertyFeatureList { get; set; }

        /// <summary>The type of property eg. ResidentialProperty, CommercialProperty, FarmProperty, OtherProperty ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PropertyTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Structure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StructureType Structure { get; set; }

        [Newtonsoft.Json.JsonProperty("SwimmingPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SwimmingPoolType SwimmingPool { get; set; }

        /// <summary>Indicates whether or not a swimming pool exists</summary>
        [Newtonsoft.Json.JsonProperty("SwimmingPoolIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SwimmingPoolIndicator { get; set; }


    }

    /// <summary>A special feature of a property</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PropertyFeatureType
    {
        /// <summary>A description of the property feature</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>Identifies the type of property feature eg. AirConditioning, Balcony, Verandah, GardenShed, GrannyFlat, SwimmingPool, Gymnasium, Playground, TennisCourt ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PropertyFeatureTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyFeatureTypeCode { get; set; }


    }

    /// <summary>A collection of data providing information about where and how ownership of an object if recorded</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Registration
    {
        /// <summary>The registration number</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>The jurisdiction (state) that issued the identifier (registration)</summary>
        [Newtonsoft.Json.JsonProperty("JurisdictionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JurisdictionCode { get; set; }

        /// <summary>The date the item will or was registered</summary>
        [Newtonsoft.Json.JsonProperty("RegistrationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationDate { get; set; }

        /// <summary>Whether the registration is current one or the previous (original) one</summary>
        [Newtonsoft.Json.JsonProperty("RegistrationTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationTypeCode { get; set; }


    }

    /// <summary>Contains structural measurement details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StructureMeasurementType
    {
        /// <summary>The capacity of the structure</summary>
        [Newtonsoft.Json.JsonProperty("CapacityMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CapacityMeasure3 CapacityMeasure { get; set; }

        /// <summary>The height of the structure</summary>
        [Newtonsoft.Json.JsonProperty("HeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeightMeasure4 HeightMeasure { get; set; }

        /// <summary>The length of the structure</summary>
        [Newtonsoft.Json.JsonProperty("LengthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LengthMeasure4 LengthMeasure { get; set; }

        /// <summary>The total area of the structure</summary>
        [Newtonsoft.Json.JsonProperty("TotalAreaMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalAreaMeasure TotalAreaMeasure { get; set; }

        /// <summary>The weight of the structure</summary>
        [Newtonsoft.Json.JsonProperty("WeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightMeasure4 WeightMeasure { get; set; }

        /// <summary>The width of the structure</summary>
        [Newtonsoft.Json.JsonProperty("WidthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WidthMeasure4 WidthMeasure { get; set; }


    }

    /// <summary>Contains structure details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StructureType
    {
        /// <summary>Indicates whether the structure is above ground</summary>
        [Newtonsoft.Json.JsonProperty("AboveGroundIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AboveGroundIndicator { get; set; }

        /// <summary>The number of separate living units in the structure</summary>
        [Newtonsoft.Json.JsonProperty("ApartmentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? ApartmentCount { get; set; }

        /// <summary>Indicates whether this building has an attached satellite dish</summary>
        [Newtonsoft.Json.JsonProperty("AttachedSatelliteDishIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AttachedSatelliteDishIndicator { get; set; }

        /// <summary>A code that defines the overall style of construction of the structure eg. Colonial, StorageFacility, SplitLevel, Cottage, Dome, Terrace, GrannyFlat, Vixtorian, Townhouse ...etc</summary>
        [Newtonsoft.Json.JsonProperty("BuildingStyleCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingStyleCode { get; set; }

        /// <summary>A descripton of the indicated building style</summary>
        [Newtonsoft.Json.JsonProperty("BuildingStyleDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingStyleDescription { get; set; }

        /// <summary>The year the structure was built</summary>
        [Newtonsoft.Json.JsonProperty("BuiltYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuiltYear { get; set; }

        /// <summary>A code indicating the  physical condition of a
        /// structure eg. New, Poor, Fair, Broken, Excellent ...etc</summary>
        [Newtonsoft.Json.JsonProperty("ConditionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConditionCode { get; set; }

        /// <summary>Information about the
        /// construction of a structure</summary>
        [Newtonsoft.Json.JsonProperty("Construction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Construction Construction { get; set; }

        /// <summary>A description of the structure</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The count of evevators</summary>
        [Newtonsoft.Json.JsonProperty("ElevatorCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? ElevatorCount { get; set; }

        /// <summary>Indicates whether one or more elevators are present</summary>
        [Newtonsoft.Json.JsonProperty("ElevatorIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ElevatorIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("FloorList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FloorList> FloorList { get; set; }

        [Newtonsoft.Json.JsonProperty("ImprovementList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ImprovementList> ImprovementList { get; set; }

        /// <summary>A code indicating the use of a kitchen eg. NoKitchen, Domestic, Commercial ...etc</summary>
        [Newtonsoft.Json.JsonProperty("KitchenUseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KitchenUseCode { get; set; }

        /// <summary>Contains the measurements details of the structure</summary>
        [Newtonsoft.Json.JsonProperty("Measurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StructureMeasurementType Measurement { get; set; }

        /// <summary>Information about the roof on a structure</summary>
        [Newtonsoft.Json.JsonProperty("Roof", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Roof Roof { get; set; }

        /// <summary>The total number of rooms in the structure</summary>
        [Newtonsoft.Json.JsonProperty("RoomCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? RoomCount { get; set; }

        [Newtonsoft.Json.JsonProperty("RoomTypeCountInformationList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoomTypeCountInformationList> RoomTypeCountInformationList { get; set; }

        /// <summary>Indicates whether an electrical safety switch has been fitted</summary>
        [Newtonsoft.Json.JsonProperty("SafetySwitchFittedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SafetySwitchFittedIndicator { get; set; }

        /// <summary>The number of stories the structure has above ground</summary>
        [Newtonsoft.Json.JsonProperty("StoreyCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? StoreyCount { get; set; }

        /// <summary>The type of structure eg. Garage, Chimney, Bunkhouse, StorageTank, WorkShed ...etc</summary>
        [Newtonsoft.Json.JsonProperty("StructureTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StructureTypeCode { get; set; }

        /// <summary>Indicaties whether the property is connected to town water</summary>
        [Newtonsoft.Json.JsonProperty("TownWaterConnectedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TownWaterConnectedIndicator { get; set; }

        /// <summary>The year the building or structure was upgraded</summary>
        [Newtonsoft.Json.JsonProperty("UpgradedYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpgradedYear { get; set; }

        [Newtonsoft.Json.JsonProperty("WallList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WallList> WallList { get; set; }


    }

    /// <summary>Details regarding the characteristics of a swimming pool</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SwimmingPoolType
    {
        /// <summary>Indicates whether the pool is above ground</summary>
        [Newtonsoft.Json.JsonProperty("AboveGroundIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AboveGroundIndicator { get; set; }

        /// <summary>Indicates whether the fence height has been approved</summary>
        [Newtonsoft.Json.JsonProperty("ApprovedFenceIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApprovedFenceIndicator { get; set; }

        /// <summary>Measurement information of the pool</summary>
        [Newtonsoft.Json.JsonProperty("Measurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StructureMeasurementType Measurement { get; set; }

        /// <summary>A code identifying the construction of a swimming pool eg. Fiberglass, Concrete ...etc</summary>
        [Newtonsoft.Json.JsonProperty("PoolConstructionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoolConstructionCode { get; set; }


    }

    /// <summary>Information about the transmission of a vehicle</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Transmission
    {
        /// <summary>A description of the transmission</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The number of wheels driven by the transmission</summary>
        [Newtonsoft.Json.JsonProperty("DrivenWheelsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DrivenWheelsCount { get; set; }

        /// <summary>The Type of Drive eg: FWD,AWD, RWD</summary>
        [Newtonsoft.Json.JsonProperty("DriveType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveType { get; set; }

        /// <summary>The Gear Count eg: 6</summary>
        [Newtonsoft.Json.JsonProperty("GearCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GearCount { get; set; }

        /// <summary>The type of transmission eg. Automatic, Manual</summary>
        [Newtonsoft.Json.JsonProperty("TransmissionTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransmissionTypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VehicleBaseType
    {
        [Newtonsoft.Json.JsonProperty("AntiTheftDevice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<AntiTheftDeviceType> AntiTheftDevice { get; set; }

        /// <summary>Details of the engine</summary>
        [Newtonsoft.Json.JsonProperty("Engine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EngineType Engine { get; set; }

        /// <summary>External identifiers for the vehicle eg. VIN, NVIC...etc</summary>
        [Newtonsoft.Json.JsonProperty("ExternalIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<ExternalIdentifier> ExternalIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("InsuranceRiskScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceRiskScore { get; set; }

        [Newtonsoft.Json.JsonProperty("HighPerformance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HighPerformance { get; set; }

        /// <summary>Manufacturer details of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        /// <summary>The highest speed attainable by the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("MaximumSpeedMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaximumSpeedMeasure2 MaximumSpeedMeasure { get; set; }

        /// <summary>Measurement details of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("Measurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VehicleMeasurementType Measurement { get; set; }

        [Newtonsoft.Json.JsonProperty("RegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Registration> RegistrationNumber { get; set; }

        /// <summary>Transmission details of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("Transmission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transmission Transmission { get; set; }

        [Newtonsoft.Json.JsonProperty("UnrepairedDamage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<UnrepairedDamageType> UnrepairedDamage { get; set; }

        /// <summary>Vehicle body details</summary>
        [Newtonsoft.Json.JsonProperty("VehicleBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VehicleBody VehicleBody { get; set; }

        [Newtonsoft.Json.JsonProperty("VehicleModification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<VehicleModificationType> VehicleModification { get; set; }

        [Newtonsoft.Json.JsonProperty("VehicleOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<VehicleOptionType> VehicleOption { get; set; }

        [Newtonsoft.Json.JsonProperty("VehicleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VehicleType2 VehicleType { get; set; }


    }

    /// <summary>Details about the body of the vehicle</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VehicleBody
    {
        /// <summary>The colour</summary>
        [Newtonsoft.Json.JsonProperty("Colour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Colour { get; set; }

        /// <summary>An industry code identifying the colour</summary>
        [Newtonsoft.Json.JsonProperty("ColourCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColourCode { get; set; }

        /// <summary>A description of the vehicle body</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The seating capacity of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("SeatingCapacityCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SeatingCapacityCount { get; set; }

        /// <summary>The type of body eg. Caravan, Trailer, FourWheelDrive, HatchBack, Sedan, Coupe, Convertible, Van, Wagon, Utility...etc</summary>
        [Newtonsoft.Json.JsonProperty("VehicleBodyTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleBodyTypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("DoorCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DoorCount { get; set; }


    }

    /// <summary>Contains information about the use of a referenced vehicle</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VehicleCoverable
    {
        /// <summary>Indicates whether the vehicle has anti-theft devices</summary>
        [Newtonsoft.Json.JsonProperty("AntiTheftDeviceIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AntiTheftDeviceIndicator { get; set; }

        /// <summary>Indicates whether the vehicle has unrepaired damage at the time of application</summary>
        [Newtonsoft.Json.JsonProperty("ExistingUnrepairedDamageIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExistingUnrepairedDamageIndicator { get; set; }

        /// <summary>Indicates whether the vehicle is financed</summary>
        [Newtonsoft.Json.JsonProperty("FinancedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FinancedIndicator { get; set; }

        /// <summary>Indicates whether the vehicle is classed as high performance</summary>
        [Newtonsoft.Json.JsonProperty("HighPerformanceIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HighPerformanceIndicator { get; set; }

        /// <summary>Indicates whether the vehicle is registered or not</summary>
        [Newtonsoft.Json.JsonProperty("IsRegisteredIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRegisteredIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationReference { get; set; }

        [Newtonsoft.Json.JsonProperty("MarketValueIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarketValueIndicator { get; set; }

        /// <summary>The mileage as read from the odometer at the time of the application</summary>
        [Newtonsoft.Json.JsonProperty("OdometerReadingAtApplication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OdometerReadingAtApplication { get; set; }

        /// <summary>The mileage as read from the odometer at the time the vehicle was purchased</summary>
        [Newtonsoft.Json.JsonProperty("OdometerReadingAtPurchase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OdometerReadingAtPurchase { get; set; }

        [Newtonsoft.Json.JsonProperty("ProtectionLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProtectionLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("RatingLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RatingLevel { get; set; }

        /// <summary>Details about the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("Vehicle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vehicle Vehicle { get; set; }

        /// <summary>The general classification of a vehicle eg. Commercial, Private, Caravan, LightCommercial, PrimeMover, Motorcycle, Bus, Passenger, Trailer, Truck...etc</summary>
        [Newtonsoft.Json.JsonProperty("VehicleClassCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleClassCode { get; set; }

        /// <summary>Indicates whether the vehicle has modifications</summary>
        [Newtonsoft.Json.JsonProperty("VehicleModificationsIncludedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VehicleModificationsIncludedIndicator { get; set; }

        /// <summary>Indicates whether the vehicle has options</summary>
        [Newtonsoft.Json.JsonProperty("VehicleOptionsIncludedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VehicleOptionsIncludedIndicator { get; set; }

        /// <summary>Details about how the vehicle is used</summary>
        [Newtonsoft.Json.JsonProperty("VehicleUse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VehicleUseType VehicleUse { get; set; }


    }
   
    /// <summary>Contains vehicle measurement details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VehicleMeasurementType
    {
        /// <summary>The height of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("HeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeightMeasure5 HeightMeasure { get; set; }

        /// <summary>The kerb weight of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("KerbWeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KerbWeightMeasure KerbWeightMeasure { get; set; }

        /// <summary>The length of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("LengthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LengthMeasure5 LengthMeasure { get; set; }

        /// <summary>The mass weight of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("MassMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassMeasure MassMeasure { get; set; }

        /// <summary>The weight of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("WeightMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightMeasure5 WeightMeasure { get; set; }

        /// <summary>The width of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("WidthMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WidthMeasure5 WidthMeasure { get; set; }

        /// <summary>The width of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("LoadCapacityMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoadCapacityMeasure LoadCapacityMeasure { get; set; }


    }

    /// <summary>A modification made to a vehicle including the value and the date it was modified</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VehicleModificationType
    {
        /// <summary>A description of the modification</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The excess amount applied for this modification</summary>
        [Newtonsoft.Json.JsonProperty("ExcessAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExcessAmount { get; set; }

        /// <summary>The date the modification was made</summary>
        [Newtonsoft.Json.JsonProperty("ModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedDate { get; set; }

        /// <summary>The valuation method used in determining the value at the time of loss eg. InvoiceCost, MarketValue, RepairReplacement, ReplacementCost, AgreedValue, SumInsured...etc</summary>
        [Newtonsoft.Json.JsonProperty("ValuationTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValuationTypeCode { get; set; }

        /// <summary>The value of the specified vehicle modification</summary>
        [Newtonsoft.Json.JsonProperty("ValueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValueAmount { get; set; }

        /// <summary>The type of modification eg. Performance, Cosmetic, Suspension, Wheels, Paint, Body, Engine...etc</summary>
        [Newtonsoft.Json.JsonProperty("VehicleModificationTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleModificationTypeCode { get; set; }


    }

    /// <summary>Information describing options and accessories on a vehicle</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VehicleOptionType
    {
        /// <summary>A description of the vehicle option</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The excess amount applied for this option or accessory</summary>
        [Newtonsoft.Json.JsonProperty("ExcessAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExcessAmount { get; set; }

        /// <summary>The value of the specified vehicle option or accessory</summary>
        [Newtonsoft.Json.JsonProperty("ValueAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValueAmount { get; set; }

        /// <summary>The specific code for the vehicle option or accessory eg. SportWheels, Canopy, MetallicPaint, ParkAssit, RoofRack, MagWheels, SpotLights, SoundEquipment, Spoiler, CruiseControl, SunRoof, AirConditioning, TowBar...etc</summary>
        [Newtonsoft.Json.JsonProperty("VehicleOptionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleOptionCode { get; set; }

        /// <summary>The type of option eg. Standard, Optional, NonStandard ...etc</summary>
        [Newtonsoft.Json.JsonProperty("VehicleOptionTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleOptionTypeCode { get; set; }


    }

    /// <summary>The condition or specific damage to the vehicle/item</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UnrepairedDamageType
    {
        /// <summary>A description of the damage</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The type of damage eg. Rust, Collision, Hail, MinorDents, Scratches, Other...etc</summary>
        [Newtonsoft.Json.JsonProperty("UnrepairedDamageTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnrepairedDamageTypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Vehicle
    {
        [Newtonsoft.Json.JsonProperty("AntiTheftDevice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AntiTheftDeviceType> AntiTheftDevice { get; set; }

        /// <summary>Details of the engine</summary>
        [Newtonsoft.Json.JsonProperty("Engine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EngineType Engine { get; set; }

        /// <summary>External identifiers for the vehicle eg. VIN, NVIC...etc</summary>
        [Newtonsoft.Json.JsonProperty("ExternalIdentifierList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalIdentifierList7> ExternalIdentifierList { get; set; }

        [Newtonsoft.Json.JsonProperty("InsuranceRiskScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceRiskScore { get; set; }

        [Newtonsoft.Json.JsonProperty("HighPerformance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HighPerformance { get; set; }

        /// <summary>Manufacturer details of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("Manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Manufacturer Manufacturer { get; set; }

        /// <summary>The highest speed attainable by the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("MaximumSpeedMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaximumSpeedMeasure3 MaximumSpeedMeasure { get; set; }

        /// <summary>Measurement details of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("Measurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VehicleMeasurementType Measurement { get; set; }

        [Newtonsoft.Json.JsonProperty("RegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Registration> RegistrationNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>Transmission details of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("Transmission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transmission Transmission { get; set; }

        [Newtonsoft.Json.JsonProperty("UnrepairedDamageList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UnrepairedDamageType> UnrepairedDamageList { get; set; }

        /// <summary>Vehicle body details</summary>
        [Newtonsoft.Json.JsonProperty("VehicleBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VehicleBody VehicleBody { get; set; }

        [Newtonsoft.Json.JsonProperty("VehicleModificationList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VehicleModificationType> VehicleModificationList { get; set; }

        [Newtonsoft.Json.JsonProperty("VehicleOptionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VehicleOptionType> VehicleOptionList { get; set; }

        [Newtonsoft.Json.JsonProperty("VehicleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VehicleType1 VehicleType1 { get; set; }


    }

    /// <summary>Details about the use of a vehicle</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VehicleUseType
    {
        /// <summary>The annual distance the vehicle is used</summary>
        [Newtonsoft.Json.JsonProperty("AnnualDistanceMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnualDistanceMeasure AnnualDistanceMeasure { get; set; }

        /// <summary>A description of the use of the vehicle</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The radius in whole numbers within which the vehicle is operated</summary>
        [Newtonsoft.Json.JsonProperty("RadiusMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RadiusMeasure RadiusMeasure { get; set; }

        /// <summary>A code describing the vehicle's radius of use eg. Local, LongDistance, Intermediate</summary>
        [Newtonsoft.Json.JsonProperty("RadiusUseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RadiusUseCode { get; set; }

        /// <summary>A code indicating any special use of this vehicle eg. FarmToMarket, MovingVan, LiquifiedProducts, EmergencyVehicle, Explosives...etc</summary>
        [Newtonsoft.Json.JsonProperty("VehicleSpecialUseCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleSpecialUseCode { get; set; }

        /// <summary>The type of use eg. Trade, Service, OffRoadDriving, PrivateExclusive, TrailerOrCaravan, Business, CarPool, Commercial, Comute, Private, Domestic...etc</summary>
        [Newtonsoft.Json.JsonProperty("VehicleUseTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VehicleUseTypeCode { get; set; }


    }

    /// <summary>Anti theft device details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AntiTheftDeviceType
    {
        /// <summary>Product code of the security device</summary>
        [Newtonsoft.Json.JsonProperty("AntiTheftDeviceProductCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AntiTheftDeviceProductCode { get; set; }

        /// <summary>The type of security device eg. Alarm, MicroDotting, LockedGarage, Immobiliser, SteeringLock, AlarmAndImmobiliser...etc</summary>
        [Newtonsoft.Json.JsonProperty("AntiTheftTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AntiTheftTypeCode { get; set; }

        /// <summary>A description of the anti-theft device</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }


    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EnumDirectDebitStatusCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ENABLED")]
        ENABLED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNVERIFIED")]
        UNVERIFIED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EnumDirectDebitTypeCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CARD")]
        CARD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACC")]
        ACC = 1,

    }

    /// <summary>Addresses - postal, physical, etc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddressType
    {
        /// <summary>The role or use of the address in relation to the client. (Can be an Australian address whilst the client is overseas). Examples include:
        /// Primary address-The property address normally used by the client. (These
        /// addresses desirably should have been assigned by a Council)
        /// NOTE: Where this is the principal place of residence of the client the residential
        /// code should be used.
        /// Secondary address-The address of an additional property attached to the client.
        /// Residential-The address of the principal place of residence for the client.
        /// Temporary accommodation-The address where the client is resident for a
        /// temporary period.
        /// Business-The address of the principal place of business for the client.
        /// Overseas address-The address used by the client when overseas.
        /// Delivery address-The address used for goods delivery purposes.
        /// Postal/correspondence-The address used by the client for receipt of
        /// correspondence.
        /// Where the address purpose is not stated or unknown a null entry will be recorded.
        /// An address may have more than one purpose.</summary>
        [Newtonsoft.Json.JsonProperty("Usage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Usage { get; set; }

        /// <summary>A code indicating the country, territory, colony or dependency for an address. The recommended Code description is the list of Country Name Codes in ISO 3166.
        /// Other Code description may be used though should be accompanied by metadata to
        /// perform the conversion from the abbreviation to the full description as agreed by
        /// the involved parties.</summary>
        [Newtonsoft.Json.JsonProperty("CountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }

        /// <summary>The Australian numeric descriptor for a postal delivery area, aligned with locality, suburb or place</summary>
        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostCode { get; set; }

        /// <summary>The State or Territory code of the address</summary>
        [Newtonsoft.Json.JsonProperty("StateTerritory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateTerritory { get; set; }

        /// <summary>Free text address line 1. Unstructured address may be repeated up to 4 lines (NOTE: where this is an
        /// overseas address the country name code becomes mandatory). This is also used for overseas addresses. NOTE: Where there is a need to transfer an Australian address that does not
        /// conform with the commonly used address format, the unstructured address lines
        /// may be used. These data elements should not be used except when it is impossible
        /// to use of the other more structured address data elements.
        /// While 4 lines have been provided for unstructured Australian address details, not all
        /// lines need to be used.
        /// Unstructured address lines, when used, should contain the entire address.</summary>
        [Newtonsoft.Json.JsonProperty("Line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line1 { get; set; }

        /// <summary>The name of the locality/suburb of the address.</summary>
        [Newtonsoft.Json.JsonProperty("LocalityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalityName { get; set; }

        /// <summary>RACQ - Extra information eg. building name, property name</summary>
        [Newtonsoft.Json.JsonProperty("SiteName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SiteName { get; set; }

        /// <summary>Start of Range Number of the street, e.g.21-25 Archer Street, where streetNumber1 is 21</summary>
        [Newtonsoft.Json.JsonProperty("StreetNumber1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber1 { get; set; }

        /// <summary>Start of Range Number of the street, e.g.21-25 Archer Street, where streetName is Archer Street</summary>
        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetName { get; set; }

        /// <summary>Identification for the channel of postal delivery. Usage: Used where mail is to be delivered to a box, bag or agent for pick-up by the
        /// intended recipient or to the rural mail box number where no other address exists.</summary>
        [Newtonsoft.Json.JsonProperty("PostalDeliveryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalDeliveryType { get; set; }

        /// <summary>PO Box Number</summary>
        [Newtonsoft.Json.JsonProperty("PostalDeliveryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalDeliveryNumber { get; set; }

        /// <summary>Mrs Joyce Citizen	 
        /// Apartment 7 	(Sub dwelling unit number is 7)
        /// Level 3	
        /// Apex Building	
        /// 48 Johnson Rd	
        /// CLAYTON VIC 3168	</summary>
        [Newtonsoft.Json.JsonProperty("UnitNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitNumber { get; set; }

        /// <summary>Mrs Joyce Citizen	
        /// Apartment 7 	(Sub-dwelling unit type code is APT)
        /// Level 3	
        /// Apex Building	
        /// 48 Johnson Rd	
        /// CLAYTON VIC 3168	</summary>
        [Newtonsoft.Json.JsonProperty("UnitType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitType { get; set; }

        /// <summary>Mrs Joyce Citizen	
        /// Apartment 7 
        /// Level 3	(BuildingLevel is 3)
        /// Apex Building	
        /// 48 Johnson Rd	
        /// CLAYTON VIC 3168	</summary>
        [Newtonsoft.Json.JsonProperty("BuildingLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingLevel { get; set; }

        /// <summary>RACQ - To support capturing of international addresses</summary>
        [Newtonsoft.Json.JsonProperty("InternationalPostCodeZipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternationalPostCodeZipCode { get; set; }

        /// <summary>RACQ - To support capturing of international addresses</summary>
        [Newtonsoft.Json.JsonProperty("InternationalStateTerritoryRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternationalStateTerritoryRegion { get; set; }

        /// <summary>A unique number created by Australia Post for an address.</summary>
        [Newtonsoft.Json.JsonProperty("DeliveryPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryPoint { get; set; }

        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        [Newtonsoft.Json.JsonProperty("ExperianValidationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExperianValidationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("ExperianValidationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExperianValidationTime { get; set; }

        [Newtonsoft.Json.JsonProperty("CombinedAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CombinedAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("ReturnMailFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnMailFlag { get; set; }

        /// <summary>RACQ - Mailing name for an address</summary>
        [Newtonsoft.Json.JsonProperty("Addressee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Addressee { get; set; }

        /// <summary>Details the relationship between the client and the associated address at the point in time of interchange. The examples provided list the recommended values. Use of additional or
        /// alternative Domain values should be accompanied by metadata as agreed by the
        /// involved parties.</summary>
        [Newtonsoft.Json.JsonProperty("ClientCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientCurrency { get; set; }

        [Newtonsoft.Json.JsonProperty("EffectiveFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectiveFrom { get; set; }

        /// <summary>Usage Period of the address. Start datetime, enddatetime</summary>
        [Newtonsoft.Json.JsonProperty("UsagePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsagePeriod UsagePeriod { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressReference { get; set; }


    }

   
    public partial class Message
    {
        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; }

        [Newtonsoft.Json.JsonProperty("Warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Warning> Warnings { get; set; }

        [Newtonsoft.Json.JsonProperty("InformationList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Information> InformationList { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DirectDebitTypeCode
    {
        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnumDirectDebitTypeCode? Value { get; set; }


    }

    /// <summary>The financial identifiers
    /// 
    /// Usage: for InstitutionName eg. Commonwealth Bank
    ///        NOTE: The name of the Bank, Credit Card company
    ///        
    /// Usage: for CardPaymentProcessor eg. Visa, MasterCard, AmericanExpress, etc
    ///        NOTE: The networks that process payments between banks and merchants for purchases made with the cards eg. Visa, MasterCard
    /// 
    /// Usage: for AccountNumberId (Bank account number, Credit/Debit card number)
    ///        NOTE: A unique number assigned to the account by the financial institution to identify that account within its business context
    /// 
    /// Usage: for CardSecurityId
    ///        NOTE: This is the security id on a credit or debit card
    /// 
    /// Usage: for BSBBankCode 
    ///        NOTE: First 3 digits of the BSB number
    /// 
    /// Usage: for BSBBranchCode
    ///        NOTE: Last 3 digits of the BSB number</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FinancialIdentifierList
    {
        /// <summary>Indicates the type of the financial identifier eg. InstitutionName, CardPaymentProcessor, AccountNumberId, CardSecurityId, BSBBankCode, BSBBranchCode...etc</summary>
        [Newtonsoft.Json.JsonProperty("TypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("FinancialIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinancialIdentifier { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CapacityMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplacementMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    /// <summary>The type of external identifier (assigned by a third party) eg. Engine number</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalIdentifierList
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>eg. EngineNumber</summary>
        [Newtonsoft.Json.JsonProperty("IdentifierTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierTypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HorsepowerMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PerilExcludedList
    {
        [Newtonsoft.Json.JsonProperty("PerilExcludedCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> PerilExcludedCode { get; set; } = new System.Collections.ObjectModel.Collection<string>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PerilIncludedList
    {
        [Newtonsoft.Json.JsonProperty("PerilIncludedCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> PerilIncludedCode { get; set; } = new System.Collections.ObjectModel.Collection<string>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductAgreementReferenceId
    {
        [Newtonsoft.Json.JsonProperty("TypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }


    }

    /// <summary>The product classification codes
    /// 
    /// Usage: for Brand eg. RACQ
    ///        NOTE: This is to support white labeling
    /// 
    /// Usage: for Pillar eg. INS (Insurance), ASSIST (Assistance), BANK (Banking)
    /// 
    /// Usage: for BroadLOB (Broad Line of Business) eg. CI (Commercial Insurance), PI (Personal Insurance), PA (Personal Assistance), CA (Commercial Assistance)
    ///        NOTE: The BroadLOB values are restricted by the Pillar
    /// 
    /// Usage: for LOB (Line of Business) eg. Motor, Home, Pet, CTP (Compulsary Third Party), RSA (Roadside Assistance), AM (Associate Motoring), HA (Home Assistance), LS (Lifestyle)
    ///        NOTE: The LOB values are restricted by the BroadLOB
    /// 
    /// Usage: for ProductType eg. Vehicle, Watercraft, Property, Pet, Lifestyle, Strata, Roadside, AssociateMotoring, HomeAssist
    ///        NOTE: The options available are determined by the Pillar, BroadLOB and LOB</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductClassificationCode
    {
        [Newtonsoft.Json.JsonProperty("TypeCode", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductAgreementReference
    {
        [Newtonsoft.Json.JsonProperty("TypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }


    }

    /// <summary>The product classification codes
    /// 
    /// Usage: for Brand eg. RACQ
    ///        NOTE: This is to support white labeling
    /// 
    /// Usage: for Pillar eg. INS (Insurance), ASSIST (Assistance), BANK (Banking)
    /// 
    /// Usage: for BroadLOB (Broad Line of Business) eg. CI (Commercial Insurance), PI (Personal Insurance), PA (Personal Assistance), CA (Commercial Assistance)
    ///        NOTE: The BroadLOB values are restricted by the Pillar
    /// 
    /// Usage: for LOB (Line of Business) eg. Motor, Home, Pet, CTP (Compulsary Third Party), RSA (Roadside Assistance), AM (Associate Motoring), HA (Home Assistance), LS (Lifestyle)
    ///        NOTE: The LOB values are restricted by the BroadLOB
    /// 
    /// Usage: for ProductType eg. Vehicle, Watercraft, Property, Pet, Lifestyle, Strata, Roadside, AssociateMotoring, HomeAssist
    ///        NOTE: The options available are determined by the Pillar, BroadLOB and LOB</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductClassification
    {
        [Newtonsoft.Json.JsonProperty("TypeCode", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }


    }

    /// <summary>Identifier for the pet</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalIdentifierList2
    {
        /// <summary>The identifier</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>A code representing the type of identifier eg. Microchip, Registration ...etc</summary>
        [Newtonsoft.Json.JsonProperty("IdentifierTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierTypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Veterinary
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The name of the veterinary practice</summary>
        [Newtonsoft.Json.JsonProperty("PraticeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PraticeName { get; set; }

        /// <summary>The suburb where the veterinary practice is located</summary>
        [Newtonsoft.Json.JsonProperty("Suburb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suburb { get; set; }

        /// <summary>Name of the vet
        /// NOTE: Only needs to be provided when there is no PartyReference</summary>
        [Newtonsoft.Json.JsonProperty("VeterinaryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonNameType VeterinaryName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GivenNameList
    {
        [Newtonsoft.Json.JsonProperty("SequenceNumber", Required = Newtonsoft.Json.Required.Always)]
        public int SequenceNumber { get; set; }

        /// <summary>Individuals given name</summary>
        [Newtonsoft.Json.JsonProperty("GivenName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string GivenName { get; set; }


    }

    /// <summary>Usage: engine number</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalIdentifierList3
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>eg. EngineNumber</summary>
        [Newtonsoft.Json.JsonProperty("IdentifierTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierTypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HeightMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LengthMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WidthMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    /// <summary>Usage: serial number</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalIdentifierList4
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentifierTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierTypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CapacityMeasure2
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HeightMeasure2
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LengthMeasure2
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightMeasure2
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WidthMeasure2
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MaximumSpeedMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HeightMeasure3
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LengthMeasure3
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightMeasure3
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WidthMeasure3
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightCapacityMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    /// <summary>Usage: serial number</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalIdentifierList5
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentifierTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierTypeCode { get; set; }


    }

    /// <summary>External identifiers for the watercraft eg registration number</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalIdentifierList6
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentifierTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierTypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LandAreaMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CapacityMeasure3
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HeightMeasure4
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LengthMeasure4
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TotalAreaMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightMeasure4
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WidthMeasure4
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Construction
    {
        [Newtonsoft.Json.JsonProperty("ConstructionStandard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConstructionStandard { get; set; }

        /// <summary>The type of construction material eg. Steel, CementFiber, Concrete, BrickVeneer, TimberWeatherboard ...etc</summary>
        [Newtonsoft.Json.JsonProperty("ConstructionTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConstructionTypeCode { get; set; }


    }

    /// <summary>Information for the floor of a structure</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FloorList
    {
        /// <summary>The floor area measurement</summary>
        [Newtonsoft.Json.JsonProperty("FloorAreaMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FloorAreaMeasure FloorAreaMeasure { get; set; }

        /// <summary>A code representing the material used on a floor eg. Concrete, IronSteel, Brick, Wood, Mixed ...etc</summary>
        [Newtonsoft.Json.JsonProperty("FloorMaterialCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FloorMaterialCode { get; set; }

        /// <summary>A descripton of the material used</summary>
        [Newtonsoft.Json.JsonProperty("MaterialDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialDescription { get; set; }


    }

    /// <summary>Improvement made on the structure</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ImprovementList
    {
        /// <summary>A description of the improvement</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The type of improvement eg. ExteriorPaint, Plumbing, Roofing, Wiring, HeatingSystem, OtherStructure ...etc</summary>
        [Newtonsoft.Json.JsonProperty("ImprovementTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImprovementTypeCode { get; set; }

        /// <summary>The year of the improvement</summary>
        [Newtonsoft.Json.JsonProperty("ImprovementYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImprovementYear { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Roof
    {
        /// <summary>A code indicating the condition of the roof eg. Average, Excellent, Good ...etc</summary>
        [Newtonsoft.Json.JsonProperty("ConditionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConditionCode { get; set; }

        /// <summary>A description of the roof</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The type of roof eg. TerraCotta, ConcreteTile, Copper, CorrugatedSteel, Fibrerglass, Timber, Slate ...etc</summary>
        [Newtonsoft.Json.JsonProperty("RoofTypeCode", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RoofTypeCode { get; set; }


    }

    /// <summary>Details relating to counts of specific room types</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoomTypeCountInformationList
    {
        /// <summary>The type of room eg. Bathroom, Lounge, Garage, Office, Kitchen, Workshop, Laundry, Rumpus ...etc</summary>
        [Newtonsoft.Json.JsonProperty("RoomTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoomTypeCode { get; set; }

        /// <summary>The number of the specified romm type</summary>
        [Newtonsoft.Json.JsonProperty("UnitCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnitCount { get; set; }


    }

    /// <summary>Information on the walls of a structure</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WallList
    {
        /// <summary>A description of the material used</summary>
        [Newtonsoft.Json.JsonProperty("MaterialDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialDescription { get; set; }

        /// <summary>A code representing the material used on a wall eg. Steel, Concrete, Brick, CementFibre, BrickVeneer, Wood, Mixed ...etc</summary>
        [Newtonsoft.Json.JsonProperty("WallMaterialCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WallMaterialCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalIdentifier
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentifierTypeCode", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IdentifierTypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MaximumSpeedMeasure2
    {

        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VehicleType2
    {
        /// <summary>The type of vehicle code  eg. CCG, CVG, HCV, IMP, MAR, MCG, MOB, MTR, OCG...etc</summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Code { get; set; }

        /// <summary>The type of vehicle eg. Caravan and Camper, Light Commercial Vehicle, Heavy Commercial Vehicle...etc</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HeightMeasure5
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KerbWeightMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LengthMeasure5
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MassMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightMeasure5
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WidthMeasure5
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadCapacityMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalIdentifierList7
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentifierTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierTypeCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MaximumSpeedMeasure3
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VehicleType1
    {
        /// <summary>The type of vehicle code  eg. CCG, CVG, HCV, IMP, MAR, MCG, MOB, MTR, OCG...etc</summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>The type of vehicle eg. Caravan and Camper, Light Commercial Vehicle, Heavy Commercial Vehicle...etc</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AnnualDistanceMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RadiusMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UsagePeriod
    {
        /// <summary>Start Date</summary>
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FloorAreaMeasure
    {
        [Newtonsoft.Json.JsonProperty("Measure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Measure { get; set; }

        [Newtonsoft.Json.JsonProperty("UnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitCode { get; set; }


    }
}



#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108