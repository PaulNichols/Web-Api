//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.5.0 (NJsonSchema v10.1.7.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace RACQAZ.Channel.CMO.NominationMgmt.v1.API.PartyManagement.Request
{
    using System;
    using System = global::System;



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PartyRequest
    {
        [Newtonsoft.Json.JsonProperty("PartyRequest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyRequest1 PartyRequest1 { get; set; } = new PartyRequest1();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PartyRequest1
    {
        [Newtonsoft.Json.JsonProperty("ApplicationArea", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ApplicationArea ApplicationArea { get; set; } = new ApplicationArea();

        [Newtonsoft.Json.JsonProperty("DataArea", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DataArea DataArea { get; set; } = new DataArea();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ApplicationArea
    {
        [Newtonsoft.Json.JsonProperty("Interaction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Interaction Interaction { get; set; } = new Interaction();

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Message Message { get; set; } = new Message();


    }

    /// <summary>Payload of the request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataArea
    {
        [Newtonsoft.Json.JsonProperty("Party", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Party2 Party { get; set; } = new Party2();

        /// <summary>Security credentials</summary>
        [Newtonsoft.Json.JsonProperty("Credentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Credentials Credentials { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Interaction
    {
        [Newtonsoft.Json.JsonProperty("Originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        /// <summary>The date time stamp of when the interaction began</summary>
        [Newtonsoft.Json.JsonProperty("InteractionDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset InteractionDateTime { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Message
    {
        [Newtonsoft.Json.JsonProperty("Sender", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Sender { get; set; } = new Originator();

        /// <summary>The date time stamp that the Sender created this message</summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDateTime { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Party2
    {
        [Newtonsoft.Json.JsonProperty("SpecifiedPerson", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SpecifiedPerson SpecifiedPerson { get; set; } = new SpecifiedPerson();

        [Newtonsoft.Json.JsonProperty("SpecifiedPerson", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SpecifiedOrganisationType SpecifiedOrganisation { get; set; } = new SpecifiedOrganisationType();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


        /// <summary>Type of party - person or organisation</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartyType Type { get; set; }
    }

    /// <summary>A number or code assigned to a party by an organisation, establishment or agency in order to uniquely identify that party. The possible values are not standardized or codified, as the data is dependent on the
    /// issuer and type of identifier.
    /// Examples:
    /// A businesses Australian business number (ABN): 85 087 326 690
    /// An individuals Medicare card number (MCN): 2345 56789 8</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IdentifierIdentificationType
    {
        [Newtonsoft.Json.JsonProperty("IdentificationSchemeAgencyIdentifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdentificationSchemeAgencyIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentificationSchemeAgencyName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdentificationSchemeAgencyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Designation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Designation { get; set; }


    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContactInternetTypeUsage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"01")]
        _01 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"02")]
        _02 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"03")]
        _03 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"08")]
        _08 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContactTelephoneTypeUsage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"01")]
        _01 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"02")]
        _02 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"03")]
        _03 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"08")]
        _08 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 4,

    }
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContactTelephoneTypeStandardFunctionality
    {
        [System.Runtime.Serialization.EnumMember(Value = @"01")]
        _01 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"02")]
        _02 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"03")]
        _03 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"04")]
        _04 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"08")]
        _08 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"09")]
        _09 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 6,

    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SpecifiedOrganisationName
    {
        [Newtonsoft.Json.JsonProperty("NameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameType { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContactPerson
    {
        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }


    }

    /// <summary>This describes the communication channels as well as the communication mechanism they use.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CommunicationType
    {
        /// <summary>This is the different types of delivery-channels the party can subscribe to. Example: DeliveryChannelGlobal, DeliveryChannelAGM, DeliveryChannelMembershipCard, DeliveryChannelNotices, DeliveryChannelTRA. AGM=Annual General Meeting. TRA=The Road Ahead</summary>
        [Newtonsoft.Json.JsonProperty("DeliverySubscription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliverySubscription { get; set; }

        /// <summary>This describes the method to be used to communicate with the party. IMPORTANT: Default is DigitalEmail and 'None' only applies to DeliveryChannelTRA.</summary>
        [Newtonsoft.Json.JsonProperty("CommunicationPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommunicationPreference { get; set; }


    }
    /// <summary>Addresses - postal, physical, etc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddressType
    {
        /// <summary>The role or use of the address in relation to the client. (Can be an Australian address whilst the client is overseas). Examples include:
        /// Primary address-The property address normally used by the client. (These
        /// addresses desirably should have been assigned by a Council)
        /// NOTE: Where this is the principal place of residence of the client the residential
        /// code should be used.
        /// Secondary address-The address of an additional property attached to the client.
        /// Residential-The address of the principal place of residence for the client.
        /// Temporary accommodation-The address where the client is resident for a
        /// temporary period.
        /// Business-The address of the principal place of business for the client.
        /// Overseas address-The address used by the client when overseas.
        /// Delivery address-The address used for goods delivery purposes.
        /// Postal/correspondence-The address used by the client for receipt of
        /// correspondence.
        /// Where the address purpose is not stated or unknown a null entry will be recorded.
        /// An address may have more than one purpose.</summary>
        [Newtonsoft.Json.JsonProperty("Usage", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Usage { get; set; }

        /// <summary>A code indicating the country, territory, colony or dependency for an address. The recommended Code description is the list of Country Name Codes in ISO 3166.
        /// Other Code description may be used though should be accompanied by metadata to
        /// perform the conversion from the abbreviation to the full description as agreed by
        /// the involved parties.</summary>
        [Newtonsoft.Json.JsonProperty("CountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }

        /// <summary>The Australian numeric descriptor for a postal delivery area, aligned with locality, suburb or place</summary>
        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostCode { get; set; }

        /// <summary>The State or Territory code of the address</summary>
        [Newtonsoft.Json.JsonProperty("StateTerritory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateTerritory { get; set; }

        /// <summary>Free text address line 1. Unstructured address may be repeated up to 4 lines (NOTE: where this is an
        /// overseas address the country name code becomes mandatory). This is also used for overseas addresses. NOTE: Where there is a need to transfer an Australian address that does not
        /// conform with the commonly used address format, the unstructured address lines
        /// may be used. These data elements should not be used except when it is impossible
        /// to use of the other more structured address data elements.
        /// While 4 lines have been provided for unstructured Australian address details, not all
        /// lines need to be used.
        /// Unstructured address lines, when used, should contain the entire address.</summary>
        [Newtonsoft.Json.JsonProperty("Line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line1 { get; set; }

        /// <summary>The name of the locality/suburb of the address.</summary>
        [Newtonsoft.Json.JsonProperty("LocalityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalityName { get; set; }

        /// <summary>RACQ - Extra information eg. building name, property name</summary>
        [Newtonsoft.Json.JsonProperty("SiteName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SiteName { get; set; }

        /// <summary>Start of Range Number of the street, e.g.21-25 Archer Street, where streetNumber1 is 21</summary>
        [Newtonsoft.Json.JsonProperty("StreetNumber1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber1 { get; set; }

        /// <summary>Start of Range Number of the street, e.g.21-25 Archer Street, where streetName is Archer Street</summary>
        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetName { get; set; }

        /// <summary>Identification for the channel of postal delivery. Usage: Used where mail is to be delivered to a box, bag or agent for pick-up by the
        /// intended recipient or to the rural mail box number where no other address exists.</summary>
        [Newtonsoft.Json.JsonProperty("PostalDeliveryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalDeliveryType { get; set; }

        /// <summary>PO Box Number</summary>
        [Newtonsoft.Json.JsonProperty("PostalDeliveryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalDeliveryNumber { get; set; }

        /// <summary>Mrs Joyce Citizen	 
        /// Apartment 7 	(Sub dwelling unit number is 7)
        /// Level 3	
        /// Apex Building	
        /// 48 Johnson Rd	
        /// CLAYTON VIC 3168	</summary>
        [Newtonsoft.Json.JsonProperty("UnitNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitNumber { get; set; }

        /// <summary>Mrs Joyce Citizen	
        /// Apartment 7 	(Sub-dwelling unit type code is APT)
        /// Level 3	
        /// Apex Building	
        /// 48 Johnson Rd	
        /// CLAYTON VIC 3168	</summary>
        [Newtonsoft.Json.JsonProperty("UnitType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitType { get; set; }

        /// <summary>Mrs Joyce Citizen	
        /// Apartment 7 
        /// Level 3	(BuildingLevel is 3)
        /// Apex Building	
        /// 48 Johnson Rd	
        /// CLAYTON VIC 3168	</summary>
        [Newtonsoft.Json.JsonProperty("BuildingLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingLevel { get; set; }

        /// <summary>RACQ - To support capturing of international addresses</summary>
        [Newtonsoft.Json.JsonProperty("InternationalPostCodeZipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternationalPostCodeZipCode { get; set; }

        /// <summary>RACQ - To support capturing of international addresses</summary>
        [Newtonsoft.Json.JsonProperty("InternationalStateTerritoryRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternationalStateTerritoryRegion { get; set; }

        /// <summary>A unique number created by Australia Post for an address.</summary>
        [Newtonsoft.Json.JsonProperty("DeliveryPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryPoint { get; set; }

        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        [Newtonsoft.Json.JsonProperty("ExperianValidationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExperianValidationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("ExperianValidationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExperianValidationTime { get; set; }

        /// <summary>RACQ - Mailing name for an address</summary>
        [Newtonsoft.Json.JsonProperty("Addressee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Addressee { get; set; }

        /// <summary>Details the relationship between the client and the associated address at the point in time of interchange. The examples provided list the recommended values. Use of additional or
        /// alternative Domain values should be accompanied by metadata as agreed by the
        /// involved parties.</summary>
        [Newtonsoft.Json.JsonProperty("ClientCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressTypeClientCurrency? ClientCurrency { get; set; }

        /// <summary>Usage Period of the address. Start datetime, end datetime</summary>
        [Newtonsoft.Json.JsonProperty("UsagePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsagePeriod UsagePeriod { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressReference { get; set; }


    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AddressTypeClientCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 1,

    }

    /// <summary>The party being an organisation, details of the organisation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SpecifiedOrganisationType
    {
        [Newtonsoft.Json.JsonProperty("IdentifierIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentifierIdentificationType> IdentifierIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactInternet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<ContactInternet> ContactInternet { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactTelephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<ContactTelephone> ContactTelephone { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Address> Address { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecifiedOrganisationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<SpecifiedOrganisationName> SpecifiedOrganisationName { get; set; }

        /// <summary>The Legal or business Structure of an organisation</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactPerson ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("LoyaltyLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoyaltyLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("GlobalMarketingOptOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalMarketingOptOut { get; set; }

        [Newtonsoft.Json.JsonProperty("Communication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Communication> Communication { get; set; }


    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Credentials
    {
        /// <summary>The user initiating the process</summary>
        [Newtonsoft.Json.JsonProperty("UserName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserName { get; set; }

        /// <summary>The external system initiating the process</summary>
        [Newtonsoft.Json.JsonProperty("SourceSystem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceSystem { get; set; }


    }

    /// <summary>Identifies the system and component where the interaction began</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Originator
    {
        /// <summary>The identifier of the system that the interaction originated from - e.g. MARS, MRM</summary>
        [Newtonsoft.Json.JsonProperty("SystemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SystemId { get; set; }

        /// <summary>Optional. The subcomponent within the system that the interaction originated from - e.g. a program or component name</summary>
        [Newtonsoft.Json.JsonProperty("SystemComponentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemComponentId { get; set; }

        /// <summary>The unique identifier about this interaction</summary>
        [Newtonsoft.Json.JsonProperty("SystemReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemReferenceId { get; set; }


    }

    /// <summary>A number or code assigned to a party by an organisation, establishment or agency in order to uniquely identify that party. The possible values are not standardized or codified, as the data is dependent on the
    /// issuer and type of identifier.
    /// Examples:
    /// A businesses Australian business number (ABN): 85 087 326 690
    /// An individuals Medicare card number (MCN): 2345 56789 8</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IdentifierIdentification
    {
        [Newtonsoft.Json.JsonProperty("IdentificationSchemeAgencyIdentifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdentificationSchemeAgencyIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentificationSchemeAgencyName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdentificationSchemeAgencyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Designation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Designation { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Party2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Person")]
        Person = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Organisation")]
        Organisation = 1,

    }

    /// <summary>The party being a person, details of the person</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SpecifiedPerson
    {
        /// <summary>The date when a person was born</summary>
        [Newtonsoft.Json.JsonProperty("BirthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTime? BirthDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactInternet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<ContactInternet> ContactInternet { get; set; }

        [Newtonsoft.Json.JsonProperty("ContactTelephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<ContactTelephone> ContactTelephone { get; set; }

        /// <summary>Identification details of the person - only one</summary>
        [Newtonsoft.Json.JsonProperty("IdentifierIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentifierIdentification> IdentifierIdentification { get; set; }

        /// <summary>0-Not Stated,1-Male,2-Female</summary>
        [Newtonsoft.Json.JsonProperty("Gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Gender { get; set; }

        /// <summary>A person's current relationship status in terms of a couple relationship or, for those not in a couple relationship, the existence of a current or previous registered marriage. \n(1-Never married, 2-Widowed, 4-Separated, 5-Married (registered and de facto), 6-De-Facto, 7-Partner)</summary>
        [Newtonsoft.Json.JsonProperty("RelationshipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RelationshipStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Address> Address { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecifiedPersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<SpecifiedPersonName> SpecifiedPersonName { get; set; }

        /// <summary>RACQ - Used to indicate the status of a person eg. Alive, Deceased</summary>
        [Newtonsoft.Json.JsonProperty("PersonStatusIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonStatusIndicator { get; set; }

        /// <summary>RACQ member loyalty level : Blue, Bronze, Silver, Gold, Gold50</summary>
        [Newtonsoft.Json.JsonProperty("LoyaltyLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoyaltyLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("DefenceForce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefenceForce { get; set; }

        [Newtonsoft.Json.JsonProperty("SeniorsCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SeniorsCard { get; set; }

        [Newtonsoft.Json.JsonProperty("Communication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Communication> Communication { get; set; }


    }

    /// <summary>Internet contact details of the person</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ContactInternet
    {
        /// <summary>An electronic mail internet contact address for a party</summary>
        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>Use types (01-Personal, 02-Business, 03-Mobile &amp; 08-Other)</summary>
        [Newtonsoft.Json.JsonProperty("Usage", Required = Newtonsoft.Json.Required.AllowNull)]
        public ContactInternetUsage? Usage { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ContactTelephone
    {
        /// <summary>Use types (01-Personal, 02-Business, 03-Mobile &amp; 08-Other)</summary>
        [Newtonsoft.Json.JsonProperty("Usage", Required = Newtonsoft.Json.Required.AllowNull)]
        public ContactTelephoneUsage? Usage { get; set; }

        /// <summary>Well known communication features available through the telephone. A telephone may have multiple standard features. 01-Voice,02-FAX,03-SMS,04-MMS,08-Other,09-Unknown</summary>
        [Newtonsoft.Json.JsonProperty("StandardFunctionality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactTelephoneStandardFunctionality? StandardFunctionality { get; set; }

        /// <summary>The minimal number that is associated to a unique provision of telephone service as accessed locally through a standard dialling access. The field length is sufficient to enable an extension to be included at the end of a telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("TelephoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneNumber { get; set; }

        /// <summary>RACQ - Indicates whether the phone number is unlisted/silent</summary>
        [Newtonsoft.Json.JsonProperty("SilentNumberFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SilentNumberFlag { get; set; }


    }

    /// <summary>Addresses - postal, physical, etc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Address
    {
        /// <summary>The role or use of the address in relation to the client. (Can be an Australian address whilst the client is overseas). Examples include:
        /// Primary address-The property address normally used by the client. (These
        /// addresses desirably should have been assigned by a Council)
        /// NOTE: Where this is the principal place of residence of the client the residential
        /// code should be used.
        /// Secondary address-The address of an additional property attached to the client.
        /// Residential-The address of the principal place of residence for the client.
        /// Temporary accommodation-The address where the client is resident for a
        /// temporary period.
        /// Business-The address of the principal place of business for the client.
        /// Overseas address-The address used by the client when overseas.
        /// Delivery address-The address used for goods delivery purposes.
        /// Postal/correspondence-The address used by the client for receipt of
        /// correspondence.
        /// Where the address purpose is not stated or unknown a null entry will be recorded.
        /// An address may have more than one purpose.</summary>
        [Newtonsoft.Json.JsonProperty("Usage", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Usage { get; set; }

        /// <summary>A code indicating the country, territory, colony or dependency for an address. The recommended Code description is the list of Country Name Codes in ISO 3166.
        /// Other Code description may be used though should be accompanied by metadata to
        /// perform the conversion from the abbreviation to the full description as agreed by
        /// the involved parties.</summary>
        [Newtonsoft.Json.JsonProperty("CountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }

        /// <summary>The Australian numeric descriptor for a postal delivery area, aligned with locality, suburb or place</summary>
        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostCode { get; set; }

        /// <summary>The State or Territory code of the address</summary>
        [Newtonsoft.Json.JsonProperty("StateTerritory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateTerritory { get; set; }

        /// <summary>Free text address line 1. Unstructured address may be repeated up to 4 lines (NOTE: where this is an
        /// overseas address the country name code becomes mandatory). This is also used for overseas addresses. NOTE: Where there is a need to transfer an Australian address that does not
        /// conform with the commonly used address format, the unstructured address lines
        /// may be used. These data elements should not be used except when it is impossible
        /// to use of the other more structured address data elements.
        /// While 4 lines have been provided for unstructured Australian address details, not all
        /// lines need to be used.
        /// Unstructured address lines, when used, should contain the entire address.</summary>
        [Newtonsoft.Json.JsonProperty("Line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line1 { get; set; }

        /// <summary>The name of the locality/suburb of the address.</summary>
        [Newtonsoft.Json.JsonProperty("LocalityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalityName { get; set; }

        /// <summary>RACQ - Extra information eg. building name, property name</summary>
        [Newtonsoft.Json.JsonProperty("SiteName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SiteName { get; set; }

        /// <summary>Start of Range Number of the street, e.g.21-25 Archer Street, where streetNumber1 is 21</summary>
        [Newtonsoft.Json.JsonProperty("StreetNumber1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber1 { get; set; }

        /// <summary>Start of Range Number of the street, e.g.21-25 Archer Street, where streetName is Archer Street</summary>
        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetName { get; set; }

        /// <summary>Identification for the channel of postal delivery. Usage: Used where mail is to be delivered to a box, bag or agent for pick-up by the
        /// intended recipient or to the rural mail box number where no other address exists.</summary>
        [Newtonsoft.Json.JsonProperty("PostalDeliveryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalDeliveryType { get; set; }

        /// <summary>PO Box Number</summary>
        [Newtonsoft.Json.JsonProperty("PostalDeliveryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalDeliveryNumber { get; set; }

        /// <summary>Mrs Joyce Citizen	 
        /// Apartment 7 	(Sub dwelling unit number is 7)
        /// Level 3	
        /// Apex Building	
        /// 48 Johnson Rd	
        /// CLAYTON VIC 3168	</summary>
        [Newtonsoft.Json.JsonProperty("UnitNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitNumber { get; set; }

        /// <summary>Mrs Joyce Citizen	
        /// Apartment 7 	(Sub-dwelling unit type code is APT)
        /// Level 3	
        /// Apex Building	
        /// 48 Johnson Rd	
        /// CLAYTON VIC 3168	</summary>
        [Newtonsoft.Json.JsonProperty("UnitType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitType { get; set; }

        /// <summary>Mrs Joyce Citizen	
        /// Apartment 7 
        /// Level 3	(BuildingLevel is 3)
        /// Apex Building	
        /// 48 Johnson Rd	
        /// CLAYTON VIC 3168	</summary>
        [Newtonsoft.Json.JsonProperty("BuildingLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingLevel { get; set; }

        /// <summary>RACQ - To support capturing of international addresses</summary>
        [Newtonsoft.Json.JsonProperty("InternationalPostCodeZipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternationalPostCodeZipCode { get; set; }

        /// <summary>RACQ - To support capturing of international addresses</summary>
        [Newtonsoft.Json.JsonProperty("InternationalStateTerritoryRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternationalStateTerritoryRegion { get; set; }

        /// <summary>A unique number created by Australia Post for an address.</summary>
        [Newtonsoft.Json.JsonProperty("DeliveryPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryPoint { get; set; }

        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        [Newtonsoft.Json.JsonProperty("ExperianValidationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExperianValidationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("ExperianValidationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExperianValidationTime { get; set; }

        /// <summary>RACQ - Mailing name for an address</summary>
        [Newtonsoft.Json.JsonProperty("Addressee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Addressee { get; set; }

        /// <summary>Details the relationship between the client and the associated address at the point in time of interchange. The examples provided list the recommended values. Use of additional or
        /// alternative Domain values should be accompanied by metadata as agreed by the
        /// involved parties.</summary>
        [Newtonsoft.Json.JsonProperty("ClientCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressClientCurrency? ClientCurrency { get; set; }

        /// <summary>Usage Period of the address. Start datetime, end datetime</summary>
        [Newtonsoft.Json.JsonProperty("UsagePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsagePeriod UsagePeriod { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressReference { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SpecifiedPersonName
    {
        [Newtonsoft.Json.JsonProperty("GivenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GivenName> GivenName { get; set; }

        /// <summary>A person's name that is either:
        /// -	The hereditary or tribal surname of a person's family; 
        /// -	Acquired by a person in accordance with a due process defined in a State or Territory Act relating to the registration of births, deaths, marriages and changes of name and sex, and for related purposes, such as the ACT Births, Deaths and Marriages Registration or; 
        /// -	Any other name distinguished from a person given name.</summary>
        [Newtonsoft.Json.JsonProperty("FamilyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FamilyName { get; set; }

        /// <summary>A prefix to a person name. An honorific form of address commencing a name, used when addressing a person by name, whether by mail, phone or in person. This data element may be repeated where more than one name title is associated with a person, eg. Honourable Doctor (Hon Dr).</summary>
        [Newtonsoft.Json.JsonProperty("NameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameTitle { get; set; }

        /// <summary>The code for the usage type of a person family name and given name that enables to
        /// differentiate between the roles of each recorded or interchanged person's name. This data element can be used where the person offers more than one family name
        /// and more than one given name.
        /// Also known as (or Aliases)-This data element denotes any other name that a
        /// person is also known by, or has been known by in the past. This includes misspelt
        /// names or name variations that are to be retained as they have been used to identify
        /// this person. More than one alias name may be recorded for a person.
        /// Maiden name-The family name of any party prior to being changed at marriage.
        /// Traditionally the term 'Maiden Name' means the family name of a woman before
        /// she is married, this was specifically due to the tradition of a woman taking the mans
        /// family name at the time of marriage. Now many couples are using hybrid or merged
        /// names to reflect the heritage of both parties in the marriage, thus both parties are
        /// changing their names at marriage. This should be reflected in the usage of the term
        /// 'Maiden Name' as it should now be used for both sexes.
        /// The usage of Maiden name should remain consistent for same sex couples, where
        /// one or both of the parties change their name at Civil Union.
        /// New born-This data element is reserved for the identification of unnamed newborn
        /// babies.
        /// Preferred name-This data element is to be associated the name by which the
        /// person chooses to be identified. Start date and end date can be used in conjunction with this data element (see ValidityPeriod element) to
        /// determine when the specific name usage type commenced or ceased to be effective.</summary>
        [Newtonsoft.Json.JsonProperty("UsageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecifiedPersonNameUsageType UsageType { get; set; }

        /// <summary>RACQ - currently being used to capture Mailing Name</summary>
        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }


    }

    /// <summary>This describes the communication channels as well as the communication mechanism they use.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Communication
    {
        /// <summary>This is the different types of delivery-channels the party can subscribe to. Example: DeliveryChannelGlobal, DeliveryChannelAGM, DeliveryChannelMembershipCard, DeliveryChannelNotices, DeliveryChannelTRA. AGM=Annual General Meeting. TRA=The Road Ahead</summary>
        [Newtonsoft.Json.JsonProperty("DeliverySubscription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliverySubscription { get; set; }

        /// <summary>This describes the method to be used to communicate with the party. IMPORTANT: Default is DigitalEmail and 'None' only applies to DeliveryChannelTRA.</summary>
        [Newtonsoft.Json.JsonProperty("CommunicationPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommunicationPreference { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ContactInternetUsage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"01")]
        _01 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"02")]
        _02 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"03")]
        _03 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"08")]
        _08 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ContactTelephoneUsage
    {
        [System.Runtime.Serialization.EnumMember(Value = @"01")]
        _01 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"02")]
        _02 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"03")]
        _03 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"08")]
        _08 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ContactTelephoneStandardFunctionality
    {
        [System.Runtime.Serialization.EnumMember(Value = @"01")]
        _01 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"02")]
        _02 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"03")]
        _03 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"04")]
        _04 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"08")]
        _08 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"09")]
        _09 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum AddressClientCurrency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UsagePeriod
    {
        /// <summary>Start Date</summary>
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start { get; set; }


    }

    /// <summary>A person's name that is either:
    /// -	Assigned by a person parents shortly after birth or adoption or other cultural ceremony; 
    /// -	Acquired by a person in accordance with a due process defined in a State or Territory Act relating to the registration of births, deaths, marriages and changes of name and sex, and for related purposes, such as the ACT Births, Deaths and Marriages Registration Act or; 
    /// -	Attained by a person within the family group or by which that person is socially identified. </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GivenName
    {
        /// <summary>Given Name sequence number. Valid values: 1 to 9. First Given name sequence number: 1, second given name sequence number: 2, etc</summary>
        [Newtonsoft.Json.JsonProperty("SequenceNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        public double? SequenceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.7.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SpecifiedPersonNameUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LGL")]
        LGL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MGN")]
        MGN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRV")]
        PRV = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PRF")]
        PRF = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PartyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Person")]
        Person = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Organisation")]
        Organisation = 1,

    }
}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108